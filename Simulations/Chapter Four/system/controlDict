/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version 2.0;
    format ascii;
    class dictionary;
    location system;
    object controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

	application				pimpleFoam;
    startFrom				latestTime;
    startTime				0;
    stopAt					endTime;
    endTime					350;
    deltaT					1.0E-3;
    writeControl			adjustableRunTime;
    writeInterval			1;
    purgeWrite				0;
    writeFormat				ascii;
    writePrecision			6;
    writeCompression		yes;
    timeFormat				general;
    timePrecision			6;
    graphFormat				raw;
    runTimeModifiable		yes;
    adjustTimeStep			true;
    maxCo					0.90;
    maxDeltaT				0.01;

functions
	{
		turbulenceFields
		{
			type					turbulenceFields;
			libs					("libfieldFunctionObjects.so");
			writeControl			writeTime;
			fields					(R nuTilda L k I);
		}
		
		yPlus1
		{
		    type       				yPlus;
		    libs       				("libfieldFunctionObjects.so");
		    writeControl			writeTime;
		}
		
		Co1
		{
			type					CourantNo;
			libs					("libfieldFunctionObjects.so");
			writeControl			writeTime;
		}

	 	fieldAverage1
		{
		    type					fieldAverage;
		    libs       				("libfieldFunctionObjects.so");
		    enabled					true;
		    writeControl			writeTime;
		    timeStart				150;
		    restartOnRestart		true;
		    resetOnOutput			false;
		        
		    fields
		    (
		        U
		        {
		            mean			on;
		            prime2Mean		on;
		            base			time;
		        }

				p
		        {
		            mean			on;
		            prime2Mean		on;
		            base			time;
		        }
                
                CourantNo
                {
                	mean			on;
		            prime2Mean		on;
		            base			time;
		        }
                
                yPlus
                {
                	mean			on;
		            prime2Mean		on;
		            base			time;
		        }
		        
		        R
		        {
		            mean			on;
		            prime2Mean		on;
		            base			time;
		        }
			);
		}
		
		probes
		{
			type				probes;
			libs				("libsampling.so");
			writeControl		timeStep;
			writeInterval		1;
			setFormat			csv;

			fields
			(
				p U
			);

			probeLocations
			(
				(0.25 0.30 0.05)		//0
				(0.30 0.30 0.05)		//1
				(0.35 0.30 0.05)		//2
				(0.40 0.30 0.05)		//3
				(0.45 0.30 0.05)		//4
				(0.50 0.30 0.05)		//5
			);
		}
		
		meanProbes
		{
			type 				probes;
			libs				("libsampling.so");
			writeControl		timeStep;
			writeInterval		1;
			setFormat			csv;
			timeStart			150;
			
			fields
			(
				pMean UMean pPrime2Mean UPrime2Mean
			);

			probeLocations
			(
				(0.25 0.30 0.05)		//0
				(0.30 0.30 0.05)		//1
				(0.35 0.30 0.05)		//2
				(0.40 0.30 0.05)		//3
				(0.45 0.30 0.05)		//4
				(0.50 0.30 0.05)		//5
			);
		}
		
		graphFour
		{
			type				surfaces;
			libs				("libsampling.so");
			writeControl		timeStep;
			writeInterval		1;
			timeStart			349;
			
			interpolationScheme cell;
			setFormat			raw;
			surfaceFormat		raw;
			
			surfaces
			(
				plane1
				{
					type            cuttingPlane;    // always triangulated
					planeType		pointAndNormal;
					
					pointAndNormalDict
					{
						point		(0 0 0.06);
						normal		(0 0 1);
					}
				}
			);
			
			fields          ( UMean );
		}
		
		tracer
		{
			type 					scalarTransport;
			libs					("libsolverFunctionObjects.so");
			enabled					true;
			timeStart				150;
			writeControl			writeTime;
			log						yes;
	
			nCorr					1;
	
			// Diffusivity

			// Fixed value diffusivity
			//D						0.001;
			
			// Turbulent diffusivity;
			alphaD					0.001;		// Molecular diffusivity
			alphaDt					1.111;		// Turbulent diffusivity (alphaDt = 1 / Sct)
			
			// Bounds the transported scalar within 0 and 1
			bounded01				true;
			
			//name of field
			field					tracer;
		}
		
		tracerVolAverage
		{
			type            		volFieldValue;
			libs            		("libfieldFunctionObjects.so");
		
			log             		true;
			timeStart				150;
			writeControl			timeStep;
			writeInterval			1;
			writeFields     		false;
				
			regionType      		cellZone;
			name            		porousZone;
			operation       		volAverage;
		
			fields
			(
				tracer
			);
		}
		
		#includeFunc residuals
	}

// ************************************************************************* //
